name: Build and Deploy

on:
  push:
    branches:
      - rc-*
      - harshita_modify-action-dev-tag
  create:
    tags:
      - 'rc-v*'
  release:
    types: [published,edited]

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: choice
        options:
          - dev
          - preprod
          - prod
        required: true
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-app
  NAMESPACE: scilifelab-traininghub-platform

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup
      run: | 
        cp env.sample .env
        cp config/secrets.example.yml config/secrets.yml

    - name: Determine the environment
      id: determine-env
      run: |
        CURRENT_DATE=$(date +%Y-%m-%d-%H-%M-%S)
        # Define the environment configuration JSON directly in a variable
        ENV_CONFIG='{
          "dev": {
            "VARIABLE_VALUE": "${{ secrets.DEV_BASE_URL }}",
            "SENDER_EMAIL": "${{ secrets.DEV_SENDER_EMAIL }}",
            "DELIVERY_METHOD": "${{ secrets.DEV_DELIVERY_METHOD }}",
            "DOCKER_TARGET": "development",
            "IMAGE_TAG": "'"$CURRENT_DATE"'"
          },
          "preprod": {
            "VARIABLE_VALUE": "${{ secrets.PREPROD_BASE_URL }}",
            "SENDER_EMAIL": "${{ secrets.PREPROD_SENDER_EMAIL }}",
            "DELIVERY_METHOD": "${{ secrets.PREPROD_DELIVERY_METHOD }}",
            "DOCKER_TARGET": "production",
            "IMAGE_TAG": "${{ github.ref_name }}"
          },
          "prod": {
            "VARIABLE_VALUE": "${{ secrets.PROD_BASE_URL }}",
            "SENDER_EMAIL": "${{ secrets.PROD_SENDER_EMAIL }}",
            "DELIVERY_METHOD": "${{ secrets.PROD_DELIVERY_METHOD }}",
            "DOCKER_TARGET": "production",
            "IMAGE_TAG": "${{ github.event.release.tag_name }}"
          }
        }'

        # Determine the environment based on the event
        ENVIRONMENT="dev"  # Default to dev
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          ENVIRONMENT=${{ github.event.inputs.environment }}
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/heads/harshita_modify-action-dev-tag]]; then
          ENVIRONMENT="dev"
        elif [[ "${{ github.event_name }}" == "create" && "${{ github.ref_type }}" == "tag" ]]; then
          ENVIRONMENT="preprod"
        elif [[ "${{ github.event_name }}" == "release" && "${{ github.event.action }}" == "published" ]]; then
          ENVIRONMENT="prod"
        fi

        # Use jq to extract the required values
        VARIABLE_VALUE=$(echo $ENV_CONFIG | jq -r --arg env "$ENVIRONMENT" '.[$env].VARIABLE_VALUE')
        SENDER_EMAIL=$(echo $ENV_CONFIG | jq -r --arg env "$ENVIRONMENT" '.[$env].SENDER_EMAIL')
        DELIVERY_METHOD=$(echo $ENV_CONFIG | jq -r --arg env "$ENVIRONMENT" '.[$env].DELIVERY_METHOD')
        DOCKER_TARGET=$(echo $ENV_CONFIG | jq -r --arg env "$ENVIRONMENT" '.[$env].DOCKER_TARGET')
        IMAGE_TAG=$(echo $ENV_CONFIG | jq -r --arg env "$ENVIRONMENT" '.[$env].IMAGE_TAG')

        # Set environment variables
        echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
        echo "VARIABLE_VALUE=$VARIABLE_VALUE" >> $GITHUB_ENV
        echo "SENDER_EMAIL=$SENDER_EMAIL" >> $GITHUB_ENV
        echo "DELIVERY_METHOD=$DELIVERY_METHOD" >> $GITHUB_ENV
        echo "DOCKER_TARGET=$DOCKER_TARGET" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Change env values in config/tess.yml
      run: |
        sed -i 's|base_url: .*|base_url: '${{ env.VARIABLE_VALUE }}'|' config/tess.yml
        sed -i 's|sender_email: .*|sender_email: '${{ env.SENDER_EMAIL }}'|' config/tess.yml
        sed -i 's|delivery_method: .*|delivery_method: '${{ env.DELIVERY_METHOD }}'|' config/tess.yml

    - name: Set lowercase repository name
      id: lowercase-repo
      run: |
        REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

    - name: Log in to the container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ghcr.io/${{ env.REPO_NAME }}-app-${{ env.ENVIRONMENT }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        file: ./Dockerfile-dev
        target: ${{ env.DOCKER_TARGET }}
        tags: | 
              ghcr.io/${{ env.REPO_NAME }}-app-${{ env.ENVIRONMENT }}:${{ env.IMAGE_TAG }}
              ${{ env.ENVIRONMENT == 'dev' && 'ghcr.io/${{ env.REPO_NAME }}-app-${{ env.ENVIRONMENT }}:${{ github.ref_name }}' || '' }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1.26.0
      with:
        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        slack-message: "GitHub build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
